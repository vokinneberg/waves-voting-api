# /etc/nginx/nginx.conf

user nginx;

# daemon off;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;


events {
	# The maximum number of simultaneous connections that can be opened by
	# a worker process.
	worker_connections 1024;

	# This sets up some smart queueing for accept(2)'ing requests
	# Set it to "on" if you have > worker_processes
	accept_mutex off;

	# These settings are OS specific, by defualt Nginx uses select(2),
	# however, for a large number of requests epoll(2) and kqueue(2)
	# are generally faster than the default (select(2))
	use epoll; # enable for Linux 2.6+
	# use kqueue; # enable for *BSD (FreeBSD, OS X, ..)
	multi_accept on;
}

http {
	# Includes mapping of file name extensions to MIME types of responses
	# and defines the default type.
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Name servers used to resolve names of upstream servers into addresses.
	# It's also needed when using tcpsocket and udpsocket in Lua modules.
	#resolver 208.67.222.222 208.67.220.220;

	# Don't tell nginx version to clients.
	server_tokens off;

	# Specifies the maximum accepted body size of a client request, as
	# indicated by the request header Content-Length. If the stated content
	# length is greater than this size, then the client receives the HTTP
	# error code 413. Set to 0 to disable.
	client_max_body_size 1m;

	# Timeout for keep-alive connections. Server will close connections after
	# this time.
	keepalive_timeout 65;

	# Sendfile copies data between one FD and other from within the kernel,
	# which is more efficient than read() + write().
	sendfile on;

	# Don't buffer data-sends (disable Nagle algorithm).
	# Good for sending frequent small bursts of data in real time.
	tcp_nodelay on;

	# Causes nginx to attempt to send its HTTP response head in one packet,
	# instead of using partial frames.
	tcp_nopush on;

	types_hash_max_size 2048;


	# Path of the file with Diffie-Hellman parameters for EDH ciphers.
	#ssl_dhparam /etc/ssl/nginx/dh2048.pem;

	# Specifies that our cipher suits should be preferred over client ciphers.
	ssl_prefer_server_ciphers on;

	# Enables a shared SSL cache with size that can hold around 8000 sessions.
	ssl_session_cache shared:SSL:2m;

	##
	# Gzip Settings
	##

	# Enable gzipping of responses.
	gzip on;

	# Enable checking the existence of precompressed files.
	gzip_static on;
	gzip_disable "msie6";
	gzip_min_length 1100;
	gzip_proxied expired no-cache no-store private auth;
	gzip_types text/plain text/xml application/xml application/xml+rss text/css text/javascript application/javascript application/x-javascript application/json font/woff2 application/font-woff image/x-icon;

	# Set the Vary HTTP header as defined in the RFC 2616.
	gzip_vary on;

	add_header X-Content-Type-Options nosniff;

	add_header X-XSS-Protection "1; mode=block;";

	# Specifies the main log format.
	log_format timed_combined '$remote_addr - $sent_http_x_request_id [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for" $request_time $upstream_response_time $pipe';

	# Sets the path, format, and configuration for a buffered log write.
	access_log /var/log/nginx/access.log timed_combined;

	server {

		listen 80;

		charset utf-8;

		index index.html;

		location /health {
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_cache_bypass $http_upgrade;
			proxy_pass http://127.0.0.1:9000/health;
		}

		location /live {
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_cache_bypass $http_upgrade;
			proxy_pass http://127.0.0.1:9000/live;
		}

		location /ready {
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_cache_bypass $http_upgrade;
			proxy_pass http://127.0.0.1:9000/ready;
		}

		location /favicon.ico {
			# matches any query beginning with /images/ and halts searching,
			# so regular expressions will not be checked.
			access_log off;
			alias /var/www/trustamust-mvp/assets/ico/favicon.ico;
		}

		location ^~ /assets {
			# matches any query beginning with /images/ and halts searching,
			# so regular expressions will not be checked.
			access_log off;
			alias /var/www/trustamust-mvp/assets;
		}

		location ^~ / {
			try_files '' /index.html =404;
		}

		location ^~ /api {
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_cache_bypass $http_upgrade;
			proxy_pass http://127.0.0.1:8080/api;
		}
	}
}
